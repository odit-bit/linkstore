// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/api.proto

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkGraphClient is the client API for LinkGraph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkGraphClient interface {
	// UpsertLink inserts or updates a link.
	UpsertLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error)
	// UpsertEdge inserts or updates an edge.
	UpsertEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error)
	// Links streams the set of links in the specified ID range.
	Links(ctx context.Context, in *Range, opts ...grpc.CallOption) (LinkGraph_LinksClient, error)
	// Edges streams the set of edges in the specified ID range.
	Edges(ctx context.Context, in *Range, opts ...grpc.CallOption) (LinkGraph_EdgesClient, error)
	// RemoveStaleEdges removes any edge that originates from the specified
	// link ID and was updated before the specified timestamp.
	RemoveStaleEdges(ctx context.Context, in *RemoveStaleEdgesQuery, opts ...grpc.CallOption) (*empty.Empty, error)
}

type linkGraphClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkGraphClient(cc grpc.ClientConnInterface) LinkGraphClient {
	return &linkGraphClient{cc}
}

func (c *linkGraphClient) UpsertLink(ctx context.Context, in *Link, opts ...grpc.CallOption) (*Link, error) {
	out := new(Link)
	err := c.cc.Invoke(ctx, "/proto.LinkGraph/UpsertLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkGraphClient) UpsertEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/proto.LinkGraph/UpsertEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkGraphClient) Links(ctx context.Context, in *Range, opts ...grpc.CallOption) (LinkGraph_LinksClient, error) {
	stream, err := c.cc.NewStream(ctx, &LinkGraph_ServiceDesc.Streams[0], "/proto.LinkGraph/Links", opts...)
	if err != nil {
		return nil, err
	}
	x := &linkGraphLinksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LinkGraph_LinksClient interface {
	Recv() (*Link, error)
	grpc.ClientStream
}

type linkGraphLinksClient struct {
	grpc.ClientStream
}

func (x *linkGraphLinksClient) Recv() (*Link, error) {
	m := new(Link)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *linkGraphClient) Edges(ctx context.Context, in *Range, opts ...grpc.CallOption) (LinkGraph_EdgesClient, error) {
	stream, err := c.cc.NewStream(ctx, &LinkGraph_ServiceDesc.Streams[1], "/proto.LinkGraph/Edges", opts...)
	if err != nil {
		return nil, err
	}
	x := &linkGraphEdgesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LinkGraph_EdgesClient interface {
	Recv() (*Edge, error)
	grpc.ClientStream
}

type linkGraphEdgesClient struct {
	grpc.ClientStream
}

func (x *linkGraphEdgesClient) Recv() (*Edge, error) {
	m := new(Edge)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *linkGraphClient) RemoveStaleEdges(ctx context.Context, in *RemoveStaleEdgesQuery, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.LinkGraph/RemoveStaleEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkGraphServer is the server API for LinkGraph service.
// All implementations must embed UnimplementedLinkGraphServer
// for forward compatibility
type LinkGraphServer interface {
	// UpsertLink inserts or updates a link.
	UpsertLink(context.Context, *Link) (*Link, error)
	// UpsertEdge inserts or updates an edge.
	UpsertEdge(context.Context, *Edge) (*Edge, error)
	// Links streams the set of links in the specified ID range.
	Links(*Range, LinkGraph_LinksServer) error
	// Edges streams the set of edges in the specified ID range.
	Edges(*Range, LinkGraph_EdgesServer) error
	// RemoveStaleEdges removes any edge that originates from the specified
	// link ID and was updated before the specified timestamp.
	RemoveStaleEdges(context.Context, *RemoveStaleEdgesQuery) (*empty.Empty, error)
	mustEmbedUnimplementedLinkGraphServer()
}

// UnimplementedLinkGraphServer must be embedded to have forward compatible implementations.
type UnimplementedLinkGraphServer struct {
}

func (UnimplementedLinkGraphServer) UpsertLink(context.Context, *Link) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLink not implemented")
}
func (UnimplementedLinkGraphServer) UpsertEdge(context.Context, *Edge) (*Edge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertEdge not implemented")
}
func (UnimplementedLinkGraphServer) Links(*Range, LinkGraph_LinksServer) error {
	return status.Errorf(codes.Unimplemented, "method Links not implemented")
}
func (UnimplementedLinkGraphServer) Edges(*Range, LinkGraph_EdgesServer) error {
	return status.Errorf(codes.Unimplemented, "method Edges not implemented")
}
func (UnimplementedLinkGraphServer) RemoveStaleEdges(context.Context, *RemoveStaleEdgesQuery) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStaleEdges not implemented")
}
func (UnimplementedLinkGraphServer) mustEmbedUnimplementedLinkGraphServer() {}

// UnsafeLinkGraphServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkGraphServer will
// result in compilation errors.
type UnsafeLinkGraphServer interface {
	mustEmbedUnimplementedLinkGraphServer()
}

func RegisterLinkGraphServer(s grpc.ServiceRegistrar, srv LinkGraphServer) {
	s.RegisterService(&LinkGraph_ServiceDesc, srv)
}

func _LinkGraph_UpsertLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Link)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkGraphServer).UpsertLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LinkGraph/UpsertLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkGraphServer).UpsertLink(ctx, req.(*Link))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkGraph_UpsertEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkGraphServer).UpsertEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LinkGraph/UpsertEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkGraphServer).UpsertEdge(ctx, req.(*Edge))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkGraph_Links_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Range)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LinkGraphServer).Links(m, &linkGraphLinksServer{stream})
}

type LinkGraph_LinksServer interface {
	Send(*Link) error
	grpc.ServerStream
}

type linkGraphLinksServer struct {
	grpc.ServerStream
}

func (x *linkGraphLinksServer) Send(m *Link) error {
	return x.ServerStream.SendMsg(m)
}

func _LinkGraph_Edges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Range)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LinkGraphServer).Edges(m, &linkGraphEdgesServer{stream})
}

type LinkGraph_EdgesServer interface {
	Send(*Edge) error
	grpc.ServerStream
}

type linkGraphEdgesServer struct {
	grpc.ServerStream
}

func (x *linkGraphEdgesServer) Send(m *Edge) error {
	return x.ServerStream.SendMsg(m)
}

func _LinkGraph_RemoveStaleEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStaleEdgesQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkGraphServer).RemoveStaleEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LinkGraph/RemoveStaleEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkGraphServer).RemoveStaleEdges(ctx, req.(*RemoveStaleEdgesQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkGraph_ServiceDesc is the grpc.ServiceDesc for LinkGraph service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkGraph_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LinkGraph",
	HandlerType: (*LinkGraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertLink",
			Handler:    _LinkGraph_UpsertLink_Handler,
		},
		{
			MethodName: "UpsertEdge",
			Handler:    _LinkGraph_UpsertEdge_Handler,
		},
		{
			MethodName: "RemoveStaleEdges",
			Handler:    _LinkGraph_RemoveStaleEdges_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Links",
			Handler:       _LinkGraph_Links_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Edges",
			Handler:       _LinkGraph_Edges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
